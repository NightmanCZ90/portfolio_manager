generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model pgmigrations {
  id     Int      @id @default(autoincrement())
  name   String   @db.VarChar(255)
  run_on DateTime @db.Timestamp(6)
}

model portfolios {
  id                              Int            @id @default(autoincrement())
  createdAt                       DateTime?      @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt                       DateTime?      @default(now()) @db.Timestamptz(6) @map("updated_at")
  name                            String         @db.VarChar(20)
  description                     String?        @db.VarChar(240)
  color                           String?        @db.Char(6)
  url                             String?
  userId                          Int            @map("user_id")
  pmId                            Int?           @map("pm_id")
  portfolioManager                users?         @relation("portfolios_pm_idTousers", fields: [pmId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                            users          @relation("portfolios_user_idTousers", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  transactions                    transactions[]
}

model transactions {
  id               Int        @id @default(autoincrement())
  createdAt        DateTime?  @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt        DateTime?  @default(now()) @db.Timestamptz(6) @map("updated_at")
  stockName        String     @db.VarChar(20) @map("stock_name")
  stockSector      String?    @db.VarChar(20) @map("stock_sector")
  transactionTime  DateTime   @db.Timestamptz(6) @map("transaction_time")
  transactionType  String     @db.VarChar(40) @map("transaction_type")
  numShares        Int        @map("num_shares")
  price            Int
  currency         String     @db.VarChar(4)
  execution        String     @db.VarChar(20)
  commissions      Int?
  notes            String?
  portfolioId     Int          @map("portfolio_id")
  portfolio        portfolios @relation(fields: [portfolioId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id                                   Int          @id @default(autoincrement())
  createdAt                            DateTime?    @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt                            DateTime?    @default(now()) @db.Timestamptz(6) @map("updated_at")
  email                                String       @unique @db.VarChar(40)
  password                             String
  firstName                            String?      @db.VarChar(40) @map("first_name")
  lastName                             String?      @db.VarChar(40) @map("last_name")
  role                                 String?      @db.VarChar(20)
  portfolioManager                     Int?         @map("portfolio_manager")
  isActive                             Boolean      @default(true) @map("is_active")
  pmUser                     users?       @relation("usersTousers_portfolio_manager", fields: [portfolioManager], references: [id], onDelete: NoAction, onUpdate: NoAction)
  portfolios_portfolios_pm_idTousers   portfolios[] @relation("portfolios_pm_idTousers")
  portfolios_portfolios_user_idTousers portfolios[] @relation("portfolios_user_idTousers")
  other_users                          users[]      @relation("usersTousers_portfolio_manager")
}
